(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{255:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("p",[t._v("本文将介绍前端路由的两种模式。\n")]),t._v(" "),t._m(0),t._v(" "),a("p",[t._v("    对于前端SPA单页面应用开发中，路由是必不可少的一部分，而前端主要分为hash和history两种模式。本文就来具体介绍分析一下这两种路由模式。")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),a("p",[t._v("简单理解就是")]),t._v(" "),t._m(6),a("p",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/location",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN相关API文档"),a("OutboundLink")],1)]),t._v(" "),t._m(7),t._v(" "),a("p",[t._v("    history模式，在HTML5新增了history.pushState和history.replaceState来进行路由控制之后就出现了另一种路由模式。"),a("br"),t._v("\n    history模式相对于hash更加美观（没有了#），但相对的，history模式需要后端服务器的支持，这时就会出现一个比较有意思的事情，"),a("a",{attrs:{href:"https://fog3211.com/blog/",target:"_blank",rel:"noopener noreferrer"}},[t._v("点击测试"),a("OutboundLink")],1),t._v("，失去了服务器的支持后，就算url地址是正确的也无法正确访问页面。")]),t._v(" "),t._m(8),t._v(" "),t._m(9),t._m(10),t._v(" "),a("p",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/History",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN相关API文档"),a("OutboundLink")],1)]),t._v(" "),t._m(11),t._v(" "),a("p",[t._v("通过利用前端路由，我们可以实现")]),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),a("p",[t._v("参考文章:"),a("a",{attrs:{href:"https://www.cnblogs.com/JRliu/p/9025290.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端路由的两种模式： hash 模式和 history 模式"),a("OutboundLink")],1)])])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#介绍","aria-hidden":"true"}},[this._v("#")]),this._v(" 介绍")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"正文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正文","aria-hidden":"true"}},[this._v("#")]),this._v(" 正文")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"hash模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hash模式","aria-hidden":"true"}},[this._v("#")]),this._v(" hash模式")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("    hash，哈希模式，特点是url中有一个#，hash指的就是#后面的部分。这里的#和css中的#是一个意思，都是用作锚点来进行定位的。"),s("br"),this._v("\n    由于 hash 值变化不会导致浏览器向服务器发出请求，而且 hash 改变会触发 hashchange 事件，浏览器的进后退也能对其进行控制，所以人们在 html5 的 history 出现前，基本都是使用 hash 来实现前端路由的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原理","aria-hidden":"true"}},[this._v("#")]),this._v(" 原理")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("当 一个窗口的 hash （URL 中 # 后面的部分）改变时就会触发 hashchange 事件（参见 location.hash）")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hashchange"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新页面的相关操作")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"history模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#history模式","aria-hidden":"true"}},[this._v("#")]),this._v(" history模式")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h4",{attrs:{id:"原理-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原理-2","aria-hidden":"true"}},[this._v("#")]),this._v(" 原理")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("history"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pushState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" title"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// state：需要保存的数据，这个数据在触发popstate事件时，可以在event.state里获取")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// title：标题，基本没用，一般传 null")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// url：设定新的历史记录的 url。新的 url 与当前 url 的 origin 必须是一样的，否则会抛出错误（可以是相对路径也可以是绝对路径）。")]),t._v("\n\nwindow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("history"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replaceState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" title"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 与pushState基本相同，但该方法是修改当前历史记录而不是创建新的历史记录。")]),t._v("\n\nwindow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"popstate"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 监听浏览器前进后退事件，pushState 与 replaceState 方法不会触发")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[this._v("TIP")]),this._v(" "),s("p",[this._v("对于为什么缺少了服务端的支持不能正确获取到路由信息，是因为直接复制url进行访问或者F5刷新的话会与原来跳转访问url的origin不一致，因此会返回404错误。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[this._v("#")]),this._v(" 总结")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("1.改变url时浏览器不会像服务器发送请求。"),s("br"),this._v("\n2.检测url的变化。"),s("br"),this._v("\n3.截获url地址，并解析出需要的信息来匹配路由规则。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("对比："),s("br"),this._v("\n1.hash模式可以兼容到IE8，history可以兼容到IE10。"),s("br"),this._v("\n2.hash模式不需要依赖服务端的支持，而history则不行。"),s("br"),this._v("\n3.hash 的传参是基于url的，如果要传递复杂的数据，会有体积的限制，而history模式不仅可以在url里放参数，还可以将数据存放在一个特定的对象中。")])}],!1,null,null,null);s.default=e.exports}}]);